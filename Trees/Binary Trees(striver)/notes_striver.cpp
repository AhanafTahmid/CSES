//Tree

- See notion notes / striver notes for details
- 

Confusions:
1. 

Questions: 


---------------------------------------------------------------------------------------------------------
Striver Tree Playlist: https://www.youtube.com/playlist?list=PLgUwDviBIf0q8Hkd7bK2Bpryj2xVJk8Vk
Resource: 
---------------------------------------------------------------------------------------------------------

//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//###########-------Binary Trees - Traversals--------####################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################


//#######################################################################
//#######-------G-1. Introduction to Graph | Types | Different Conventions Used--------########
//Tutorial: https://takeuforward.org/binary-tree/introduction-to-trees/
//Problem: https://www.geeksforgeeks.org/problems/introduction-to-trees/1


------------------------Theory----------------------------------
//

//


//#######################################################################
//#######-------L2. Binary Tree Representation in C++--------########
//Tutorial: https://takeuforward.org/binary-tree/binary-tree-representation-in-c/
//Problem: https://www.geeksforgeeks.org/problems/binary-tree-representation/1

//#######################################################################
//#######-------L3. Binary Tree Representation in Java--------########
//Tutorial: https://takeuforward.org/binary-tree/binary-tree-representation-in-java/
//Problem: https://www.geeksforgeeks.org/problems/binary-tree-representation/1


//#######################################################################
//#######-------L4. Binary Tree Traversals in Binary Tree | BFS | DFS--------########
//Tutorial: https://takeuforward.org/binary-tree/binary-tree-traversal-inorder-preorder-postorder/
//Problem: https://www.naukri.com/code360/problems/tree-traversal_981269
//Problem2: https://www.geeksforgeeks.org/problems/tree-from-postorder-and-inorder/1



//#######################################################################
//#######-------L5. Preorder Traversal of Binary Tree--------########
//Tutorial: https://takeuforward.org/data-structure/preorder-traversal-of-binary-tree/
//Problem: https://leetcode.com/problems/binary-tree-preorder-traversal/description/
https://www.geeksforgeeks.org/problems/preorder-traversal/1


//#######################################################################
//#######-------L6. Inorder Traversal of Binary Tree--------########
//Tutorial: https://takeuforward.org/data-structure/inorder-traversal-of-binary-tree/
//Problem: https://leetcode.com/problems/binary-tree-inorder-traversal/description/
https://www.geeksforgeeks.org/problems/inorder-traversal/1


//#######################################################################
//#######-------L7. Postorder Traversal of Binary Tree--------########
//Tutorial: https://takeuforward.org/data-structure/post-order-traversal-of-binary-tree/
//Problem: https://leetcode.com/problems/binary-tree-postorder-traversal/description/
https://www.geeksforgeeks.org/problems/postorder-traversal/1


//#######################################################################
//#######-------L8. Level Order Traversal of Binary Tree | BFS--------########
//Tutorial: https://takeuforward.org/data-structure/level-order-traversal-of-a-binary-tree/
//Problem: https://leetcode.com/problems/binary-tree-level-order-traversal/description/
https://www.geeksforgeeks.org/problems/level-order-traversal/1


//#######################################################################
//#######-------L9. Iterative Preorder Traversal in Binary Tree--------########
//Tutorial: https://takeuforward.org/data-structure/iterative-preorder-traversal-of-binary-tree
//Problem: https://leetcode.com/problems/binary-tree-preorder-traversal/description/


//#######################################################################
//#######-------L10. Iterative Inorder Traversal in Binary Tree | Stack--------########
//Tutorial: https://takeuforward.org/data-structure/inorder-traversal-of-binary-tree/
//Problem: 

//#######################################################################
//#######-------L11. Iterative Postorder Traversal using 2 Stack--------########
//Tutorial: https://takeuforward.org/data-structure/iterative-postorder-traversal-of-binary-tree-using-2-stack
//Problem: https://leetcode.com/problems/binary-tree-postorder-traversal/description/

//#######################################################################
//#######-------L12. Iterative Postorder Traversal using 1 Stack--------########
//Tutorial: https://takeuforward.org/data-structure/iterative-postorder-traversal-of-binary-tree-using-1-stack
//Problem: https://leetcode.com/problems/binary-tree-postorder-traversal/description/

//#######################################################################
//#######-------L13. Preorder Inorder Postorder Traversals in One Traversal | Stack--------########
//Tutorial: https://takeuforward.org/data-structure/preorder-inorder-postorder-traversals-in-one-traversal/
//Problem: https://www.geeksforgeeks.org/problems/postorder-traversal-iterative/1
//Problem2: https://www.naukri.com/code360/problems/tree-traversals_981269



//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//##########-------Binary Trees - Medium Problems--------################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################


//#######################################################################
//#######-------G-1. Introduction to Graph | Types | Different Conventions Used--------########
//Tutorial: 
//Problem: 


//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//##########-------Binary Trees - Hard Problems--------##################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################

//#######################################################################
//#######-------G-1. Introduction to Graph | Types | Different Conventions Used--------########
//Tutorial: 
//Problem: 

//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######-------Binary Search Trees [Concept and Problems]--------#######
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################

//#######################################################################
//#######-------G-1. Introduction to Graph | Types | Different Conventions Used--------########
//Tutorial: 
//Problem: 


//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#########-------Binary Search Trees - Practice Problems--------########
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################

//#######################################################################
//#######-------G-1. Introduction to Graph | Types | Different Conventions Used--------########
//Tutorial: 
//Problem: 



-------------------------------------------------------------------------
-------------------------------------------------------------------------
-------------------------------------------------------------------------
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//##########-------Introduction to Graph--------####################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################


//#######################################################################
//#######-------G-8. Number of Islands | Number of Connected Components in Matrix--------########
//Tutorial: https://takeuforward.org/data-structure/number-of-islands/
//Problem: https://leetcode.com/problems/number-of-islands/description/


2d grid bfs
------------
BFS
Time complexity:
Space complexity: O(N*N) + O(N*N)[for queue, all are connected, marked as 1]
------------
class Solution {
public:
    vector<int>dx{ 0,  0, 1,-1};
    vector<int>dy{-1, +1, 0, 0};
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size(), m = grid[0].size(), ans = 0;
        vector<vector<bool>>visited(n, vector<bool>(m));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!visited[i][j] && grid[i][j]=='1'){
                    ans++;
                    queue<pair<int,int>> q;
                    q.push({i,j});
                    visited[i][j] = 1;
                    while(!q.empty()){
                        int xx = q.front().first;
                        int yy = q.front().second;
                        q.pop();
                        //go in 4 direction
                        for(int k=0;k<4;k++){
                            int x = xx + dx[k];
                            int y = yy + dy[k];
                            if( x>=0 && x<n && y<m && y>=0  && grid[x][y] != '0' && !visited[x][y]){
                                visited[x][y] = 1;
                                q.push({x,y});
                            }
                        }
                    }
                }
            }
        }
        return ans;
    }
};

------------
DFS:
------------
2d grid dfs

class Solution {
public:
    void dfs(int i, int j, int n, int m,vector<vector<char>>& grid,vector<vector<bool>>&visited){
        //outbound hole backtrack
        if( i<0 || i==n || j==m || j<0 ) return;
        //already visited or '0' grid then don't visit
        if(visited[i][j] || grid[i][j] == '0') return;
        visited[i][j] = 1;
        dfs(i+1,j, n, m, grid, visited);
        dfs(i-1,j, n, m, grid, visited);
        dfs(i,j-1, n, m, grid, visited);
        dfs(i,j+1, n, m, grid, visited);
    }
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size(), m = grid[0].size(), ans = 0;
        vector<vector<bool>>visited(n, vector<bool>(m));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!visited[i][j] && grid[i][j]=='1'){
                    ans++;
                    dfs(i, j, n, m, grid, visited);
                }
            }
        }
        return ans;
    }
};





//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//##########-------MinimumSpanningTree/Disjoint Set--------##############
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################



//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################-------Finished--------#########################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
//#######################################################################
-------------------------------------------------------------------------
-------------------------------------------------------------------------